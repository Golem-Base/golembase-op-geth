// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package main

import (
	"context"
)

const deleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entities WHERE key = ?
`

func (q *Queries) DeleteEntity(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteEntity, key)
	return err
}

const deleteNumericAnnotations = `-- name: DeleteNumericAnnotations :exec
DELETE FROM numeric_annotations WHERE entity_key = ?
`

func (q *Queries) DeleteNumericAnnotations(ctx context.Context, entityKey string) error {
	_, err := q.db.ExecContext(ctx, deleteNumericAnnotations, entityKey)
	return err
}

const deleteStringAnnotations = `-- name: DeleteStringAnnotations :exec
DELETE FROM string_annotations WHERE entity_key = ?
`

func (q *Queries) DeleteStringAnnotations(ctx context.Context, entityKey string) error {
	_, err := q.db.ExecContext(ctx, deleteStringAnnotations, entityKey)
	return err
}

const getEntity = `-- name: GetEntity :one
SELECT expires_at, payload FROM entities WHERE key = ?
`

type GetEntityRow struct {
	ExpiresAt int64
	Payload   []byte
}

func (q *Queries) GetEntity(ctx context.Context, key string) (GetEntityRow, error) {
	row := q.db.QueryRowContext(ctx, getEntity, key)
	var i GetEntityRow
	err := row.Scan(&i.ExpiresAt, &i.Payload)
	return i, err
}

const getNumericAnnotations = `-- name: GetNumericAnnotations :many
SELECT annotation_key, value FROM numeric_annotations WHERE entity_key = ?
`

type GetNumericAnnotationsRow struct {
	AnnotationKey string
	Value         int64
}

func (q *Queries) GetNumericAnnotations(ctx context.Context, entityKey string) ([]GetNumericAnnotationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getNumericAnnotations, entityKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNumericAnnotationsRow
	for rows.Next() {
		var i GetNumericAnnotationsRow
		if err := rows.Scan(&i.AnnotationKey, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStringAnnotations = `-- name: GetStringAnnotations :many
SELECT annotation_key, value FROM string_annotations WHERE entity_key = ?
`

type GetStringAnnotationsRow struct {
	AnnotationKey string
	Value         string
}

func (q *Queries) GetStringAnnotations(ctx context.Context, entityKey string) ([]GetStringAnnotationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getStringAnnotations, entityKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStringAnnotationsRow
	for rows.Next() {
		var i GetStringAnnotationsRow
		if err := rows.Scan(&i.AnnotationKey, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertEntity = `-- name: InsertEntity :exec
INSERT INTO entities (key, expires_at, payload) VALUES (?, ?, ?)
`

type InsertEntityParams struct {
	Key       string
	ExpiresAt int64
	Payload   []byte
}

func (q *Queries) InsertEntity(ctx context.Context, arg InsertEntityParams) error {
	_, err := q.db.ExecContext(ctx, insertEntity, arg.Key, arg.ExpiresAt, arg.Payload)
	return err
}

const insertNumericAnnotation = `-- name: InsertNumericAnnotation :exec
INSERT INTO numeric_annotations (entity_key, annotation_key, value) VALUES (?, ?, ?)
`

type InsertNumericAnnotationParams struct {
	EntityKey     string
	AnnotationKey string
	Value         int64
}

func (q *Queries) InsertNumericAnnotation(ctx context.Context, arg InsertNumericAnnotationParams) error {
	_, err := q.db.ExecContext(ctx, insertNumericAnnotation, arg.EntityKey, arg.AnnotationKey, arg.Value)
	return err
}

const insertStringAnnotation = `-- name: InsertStringAnnotation :exec
INSERT INTO string_annotations (entity_key, annotation_key, value) VALUES (?, ?, ?)
`

type InsertStringAnnotationParams struct {
	EntityKey     string
	AnnotationKey string
	Value         string
}

func (q *Queries) InsertStringAnnotation(ctx context.Context, arg InsertStringAnnotationParams) error {
	_, err := q.db.ExecContext(ctx, insertStringAnnotation, arg.EntityKey, arg.AnnotationKey, arg.Value)
	return err
}
